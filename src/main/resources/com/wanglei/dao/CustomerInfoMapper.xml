<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wanglei.dao.CustomerInfoMapper" >
  <resultMap id="BaseResultMap" type="com.wanglei.model.CustomerInfo" >
    <id column="CUSTOMER_ID" property="customerId" jdbcType="VARCHAR" />
    <result column="CUSTOMER_NAME" property="customerName" jdbcType="VARCHAR" />
    <result column="ADDRESS" property="address" jdbcType="VARCHAR" />
    <result column="CONTACTS" property="contacts" jdbcType="VARCHAR" />
    <result column="PHONE_NO" property="phoneNo" jdbcType="VARCHAR" />
    <result column="EMAIL" property="email" jdbcType="VARCHAR" />
    <result column="REMARK" property="remark" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    CUSTOMER_ID, CUSTOMER_NAME, ADDRESS, CONTACTS, PHONE_NO, EMAIL, REMARK
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.wanglei.model.CustomerInfoExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from CUSTOMER_INFO
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from CUSTOMER_INFO
    where CUSTOMER_ID = #{customerId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from CUSTOMER_INFO
    where CUSTOMER_ID = #{customerId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.wanglei.model.CustomerInfoExample" >
    delete from CUSTOMER_INFO
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.wanglei.model.CustomerInfo" >
    insert into CUSTOMER_INFO (CUSTOMER_ID, CUSTOMER_NAME, ADDRESS, 
      CONTACTS, PHONE_NO, EMAIL, 
      REMARK)
    values (#{customerId,jdbcType=VARCHAR}, #{customerName,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, 
      #{contacts,jdbcType=VARCHAR}, #{phoneNo,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.wanglei.model.CustomerInfo" >
    insert into CUSTOMER_INFO
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="customerId != null" >
        CUSTOMER_ID,
      </if>
      <if test="customerName != null" >
        CUSTOMER_NAME,
      </if>
      <if test="address != null" >
        ADDRESS,
      </if>
      <if test="contacts != null" >
        CONTACTS,
      </if>
      <if test="phoneNo != null" >
        PHONE_NO,
      </if>
      <if test="email != null" >
        EMAIL,
      </if>
      <if test="remark != null" >
        REMARK,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="customerId != null" >
        #{customerId,jdbcType=VARCHAR},
      </if>
      <if test="customerName != null" >
        #{customerName,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="contacts != null" >
        #{contacts,jdbcType=VARCHAR},
      </if>
      <if test="phoneNo != null" >
        #{phoneNo,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.wanglei.model.CustomerInfoExample" resultType="java.lang.Integer" >
    select count(*) from CUSTOMER_INFO
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByPrimaryKeySelective" parameterType="com.wanglei.model.CustomerInfo" >
    update CUSTOMER_INFO
    <set >
      <if test="customerName != null" >
        CUSTOMER_NAME = #{customerName,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        ADDRESS = #{address,jdbcType=VARCHAR},
      </if>
      <if test="contacts != null" >
        CONTACTS = #{contacts,jdbcType=VARCHAR},
      </if>
      <if test="phoneNo != null" >
        PHONE_NO = #{phoneNo,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        EMAIL = #{email,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        REMARK = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where CUSTOMER_ID = #{customerId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.wanglei.model.CustomerInfo" >
    update CUSTOMER_INFO
    set CUSTOMER_NAME = #{customerName,jdbcType=VARCHAR},
      ADDRESS = #{address,jdbcType=VARCHAR},
      CONTACTS = #{contacts,jdbcType=VARCHAR},
      PHONE_NO = #{phoneNo,jdbcType=VARCHAR},
      EMAIL = #{email,jdbcType=VARCHAR},
      REMARK = #{remark,jdbcType=VARCHAR}
    where CUSTOMER_ID = #{customerId,jdbcType=VARCHAR}
  </update>
</mapper>